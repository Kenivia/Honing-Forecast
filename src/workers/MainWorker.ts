import { assert, LABELS } from "./Helper.js"
// import init from "../../pkg/honing_forecast_bg.js?init"
import init, { chance_to_cost_wrapper, cost_to_chance_wrapper } from "../../pkg/honing_forecast.js" // or "../pkg/honing_wasm"

let wasmReady: Promise<void> | null = null
async function ensureWasm() {
    if (!wasmReady) {
        // init() is the default initializer generated by wasm-bindgen/wasm-pack
        wasmReady = (async () => {
            await init() // this loads/instantiates the .wasm
        })()
    }
    return wasmReady
}

async function ChanceToCostWasm(payload: any) {
    await ensureWasm()
    // chance_to_cost expects a JS object (JsValue); pass payload directly
    const out = (chance_to_cost_wrapper as any)(payload)
    // out will be a JS array/object depending on what Rust returned
    console.log(out)
    return out
}

async function CostToChanceWasm(payload: any) {
    await ensureWasm()
    // chance_to_cost expects a JS object (JsValue); pass payload directly
    const out = (cost_to_chance_wrapper as any)(payload)
    // out will be a JS array/object depending on what Rust returned
    console.log(out)
    return out
}

self.addEventListener("message", async (ev) => {
    const msg = ev.data
    let start_time = Date.now()
    // const resp = await fetch("/Honing-Forecast/data.json")
    // const text = await resp.text()
    // const {
    //     normal_hone_chances,
    //     normal_hone_weapon_cost,
    //     normal_hone_armor_cost,
    //     normal_hone_weapon_unlock,
    //     normal_hone_armor_unlock,
    //     adv_hone_cost,
    //     adv_hone_unlock,
    //     adv_data_10_20_juice,
    //     adv_data_30_40_juice,
    //     adv_data_10_20,
    //     adv_data_30_40,
    // } = JSON.parse(text)
    const { id, payload, which_one } = msg
    // payload.normal_hone_chances = normal_hone_chances
    // payload.normal_hone_weapon_cost = normal_hone_weapon_cost
    // payload.normal_hone_armor_cost = normal_hone_armor_cost
    // payload.normal_hone_weapon_unlock = normal_hone_weapon_unlock
    // payload.normal_hone_armor_unlock = normal_hone_armor_unlock
    // payload.adv_hone_cost = adv_hone_cost
    // payload.adv_hone_unlock = adv_hone_unlock
    // payload.adv_data_10_20_juice = adv_data_10_20_juice
    // payload.adv_data_30_40_juice = adv_data_30_40_juice
    // payload.adv_data_10_20 = adv_data_10_20
    // payload.adv_data_30_40 = adv_data_30_40

    assert(which_one == "CostToChance" || which_one == "ChanceToCost")
    console.log(JSON.stringify(payload))
    let out
    if (which_one == "CostToChance") {
        out = await CostToChanceWasm(payload)
    } else if (which_one == "ChanceToCost") {
        out = await ChanceToCostWasm(payload)
    }
    const this_labels = LABELS.concat(["Red juice", "Blue juice", "Est. Probability"])

    let result = Object.fromEntries(this_labels.map((l, ind) => [l, out[ind]]))
    result.run_time = ((Date.now() - start_time) / 1000).toFixed(2)
    self.postMessage({ type: "result", id, result: result })
})
