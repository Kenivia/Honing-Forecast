{"version":3,"file":"control-panel-4DbgvF8Y.js","sources":["../../src/Frontend/features/honing_forecast/ControlPanel.tsx","../../src/Frontend/features/honing_forecast/NormalHoningPanel.tsx","../../src/Frontend/features/honing_forecast/AdvancedHoningPanel.tsx","../../src/Frontend/features/honing_forecast/ControlPanelFunctions.ts"],"sourcesContent":["import React from 'react'\nimport { styles } from './styles.ts'\n\ntype ControlPanelProps = {\n    controlsLeft: number | null\n    mainScale: number\n    fillDemo: () => void\n    fillRandom: () => void\n    clearAll: () => void\n    express_event: boolean\n    set_express_event: (_next: boolean) => void\n    cumulativeGraph: boolean\n    setCumulativeGraph: (_next: boolean) => void\n    dataSize: string\n    setDataSize: (_v: string) => void\n    lockXAxis: boolean\n    onToggleLockXAxis: () => void\n    useGridInput: boolean\n    setUseGridInput: (_next: boolean) => void\n}\n\nexport default function ControlPanel({ controlsLeft: _controlsLeft, mainScale: _mainScale, fillDemo, fillRandom, clearAll, express_event, set_express_event, cumulativeGraph, setCumulativeGraph, dataSize, setDataSize, lockXAxis, onToggleLockXAxis, useGridInput, setUseGridInput }: ControlPanelProps) {\n    return (\n        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 0, minWidth: 200, flexShrink: 0 }}>\n            <h3 style={{ ...styles.sectionTitle, marginTop: '-8px', alignSelf: 'center' }}>Controls</h3>\n            <div style={{ ...styles.buttonSection, marginTop: '-8px', width: '200px' }}>\n                <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--spacing-sm)', width: '100%' }}>\n                    <button style={styles.demoButton} onClick={fillDemo}>Fill Demo</button>\n                    <button style={styles.demoButton} onClick={fillRandom}>Fill Random</button>\n                    <button style={styles.demoButton} onClick={clearAll}>Reset All</button>\n\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px', marginTop: '8px' }}>\n                        <label htmlFor=\"express_event\" style={{ color: 'var(--text-primary)', fontSize: 'var(--font-size-sm)', cursor: 'pointer' }}>Express event</label>\n                        <input\n                            type=\"checkbox\"\n                            id=\"express_event\"\n                            checked={express_event}\n                            onChange={(e) => set_express_event(e.target.checked)}\n                            style={{\n                                width: '16px',\n                                height: '16px',\n                                cursor: 'pointer',\n                                accentColor: 'var(--control-checked-bg)'\n                            }}\n                        />\n                    </div>\n\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                        <label htmlFor=\"cumulative_graph\" style={{ color: 'var(--text-primary)', fontSize: 'var(--font-size-sm)', cursor: 'pointer' }}>Cumulative Graph</label>\n                        <input\n                            type=\"checkbox\"\n                            id=\"cumulative_graph\"\n                            checked={cumulativeGraph}\n                            onChange={(e) => setCumulativeGraph(e.target.checked)}\n                            style={{\n                                width: '16px',\n                                height: '16px',\n                                cursor: 'pointer',\n                                accentColor: 'var(--control-checked-bg)'\n                            }}\n                        />\n                    </div>\n\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                        <label htmlFor=\"grid_input\" style={{ color: 'var(--text-primary)', fontSize: 'var(--font-size-sm)', cursor: 'pointer' }}>Grid input</label>\n                        <input\n                            type=\"checkbox\"\n                            id=\"grid_input\"\n                            checked={useGridInput}\n                            onChange={(e) => setUseGridInput(e.target.checked)}\n                            style={{\n                                width: '16px',\n                                height: '16px',\n                                cursor: 'pointer',\n                                accentColor: 'var(--control-checked-bg)'\n                            }}\n                        />\n                    </div>\n                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                        <label htmlFor=\"data_size\" style={{ color: 'var(--text-primary)', fontSize: 'var(--font-size-sm)', cursor: 'pointer', textWrap: 'nowrap' }}>Trial count</label>\n                        <input type=\"text\" id=\"data_size\" value={dataSize} onChange={(e) => {\n                            let v = e.target.value.replace(/[^0-9]/g, '')\n                            v = v.replace(/^0+(?=\\d)/, '')\n                            setDataSize(v)\n                        }} onBlur={() => {\n                            const n = Math.min(1000000, Math.max(1000, Math.floor(Number(dataSize) || 0)))\n                            setDataSize(String(n))\n                        }} style={{ width: 80, fontSize: 14, padding: '6px 8px', borderRadius: 6, background: 'var(--input-bg)', color: 'var(--input-text)', border: '1px solid var(--input-border)' }} placeholder=\"100000\" />\n                    </div>\n\n                    <button\n                        style={{\n                            ...styles.demoButton,\n                            background: lockXAxis ? 'var(--btn-toggle-lock-selected)' : \"var(--btn-demo)\",\n                            color: lockXAxis ? '#000000' : 'var(--btn-demo-text)',\n                            width: '100%'\n                        }}\n                        onClick={onToggleLockXAxis}\n                        title=\"Lock the x-axis to compare the costs of 2 selections\"\n                    >\n                        {lockXAxis ? 'x-axis Locked' : 'Lock x-axis'}\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n","import React from 'react'\nimport { styles } from './styles.ts'\nimport CheckboxGrid from '../../components/CheckboxGrid.tsx'\nimport Icon from '../../components/Icon.tsx'\nimport { TOP_ROWS, TOP_COLS, CELL_W, CELL_H } from './constants.ts'\n\ntype NormalHoningPanelProps = {\n    topGrid: boolean[][]\n    setTopGrid: React.Dispatch<React.SetStateAction<any>>\n    prev_checked_arr: boolean[]\n    set_prev_checked_arr: React.Dispatch<React.SetStateAction<boolean[]>>\n    topGridRef: React.RefObject<HTMLDivElement | null>\n    marquee: any\n    onGridMouseDown: (_grid: 'top' | 'bottom', _e: React.MouseEvent) => void\n    useGridInput?: boolean\n    normalCounts?: number[][]\n    onNumericInputChange?: (_grid: 'top' | 'bottom', _row: number, _col: number, _value: number) => void\n}\n\nexport default function NormalHoningPanel({ topGrid, setTopGrid, prev_checked_arr, set_prev_checked_arr, topGridRef, marquee, onGridMouseDown, useGridInput = true, normalCounts, onNumericInputChange }: NormalHoningPanelProps) {\n    return (\n        <div>\n            <h2 style={{ ...styles.sectionTitle, marginTop: '-8px' }}>Normal Honing</h2>\n            <div style={{ ...styles.gridSection, maxWidth: \"851px\" }}>\n                <div style={{ display: 'flex', gap: 8 }}>\n                    <div style={{ width: 100, display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', textWrap: 'nowrap', gap: 0 }}>\n                        {['', 'Helmet', 'Shoulder', 'Chest', 'Pants', 'Glove', 'Weapon'].map((lab) => (\n                            <div key={\"Normal Honing label\" + lab} style={{ height: 28, color: 'var(--text-secondary)', display: 'flex', alignItems: 'center', justifyContent: 'flex-end', paddingRight: 8 }}>\n                                {lab ? <Icon iconName={lab} size={28} style={{ fontSize: 'var(--font-size-sm)' }} /> : ''}\n                            </div>\n                        ))}\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                        <div style={{ display: 'grid', gridTemplateColumns: `repeat(${TOP_COLS}, ${CELL_W}px)`, gap: 0, paddingLeft: 1 }}>\n                            {topGrid[0].map((_col, col_num) => {\n                                const label = `+${col_num + 1}`\n                                return (\n                                    <div key={label} className=\"checkbox-item\">\n                                        <input\n                                            id={label}\n                                            type=\"checkbox\"\n                                            className=\"visually-hidden\"\n                                            checked={prev_checked_arr[col_num]}\n                                            onChange={() => setTopGrid((prev: any) => {\n                                                const copy = prev.map((row: any) => row.slice())\n                                                const newState = !prev_checked_arr[col_num]\n                                                for (let rr = 0; rr < TOP_ROWS; rr++) {\n                                                    copy[rr][col_num] = newState\n                                                }\n                                                set_prev_checked_arr(prev => {\n                                                    const newArr = [...prev]\n                                                    newArr[col_num] = newState\n                                                    return newArr\n                                                })\n                                                return copy\n                                            })}\n                                        />\n                                        <label htmlFor={label} className=\"box\">\n                                            <span className=\"box-text\">{label}</span>\n                                        </label>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <CheckboxGrid\n                            grid={topGrid}\n                            rows={TOP_ROWS}\n                            cols={TOP_COLS}\n                            gridRef={topGridRef}\n                            onGridMouseDown={onGridMouseDown}\n                            marquee={marquee}\n                            CELL_W={CELL_W}\n                            CELL_H={CELL_H}\n                            gridName=\"top\"\n                            useGridInput={useGridInput}\n                            numericInputs={normalCounts}\n                            onNumericInputChange={onNumericInputChange}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n","import React from 'react'\nimport { styles } from './styles.ts'\nimport CheckboxGrid from '../../components/CheckboxGrid.tsx'\nimport Icon from '../../components/Icon.tsx'\nimport { BOTTOM_ROWS, BOTTOM_COLS, CELL_W, CELL_H } from './constants.ts'\n\ntype AdvancedHoningPanelProps = {\n    bottomGrid: boolean[][]\n    setBottomGrid: React.Dispatch<React.SetStateAction<any>>\n    prev_checked_arr_bottom: boolean[]\n    set_prev_checked_arr_bottom: React.Dispatch<React.SetStateAction<boolean[]>>\n    bottomGridRef: React.RefObject<HTMLDivElement | null>\n    marquee: any\n    onGridMouseDown: (_grid: 'top' | 'bottom', _e: React.MouseEvent) => void\n    adv_hone_strategy: string\n    adv_hone_strategy_change: (_v: string) => void\n    useGridInput?: boolean\n    advCounts?: number[][]\n    onNumericInputChange?: (_grid: 'top' | 'bottom', _row: number, _col: number, _value: number) => void\n}\n\nexport default function AdvancedHoningPanel({ bottomGrid, setBottomGrid, prev_checked_arr_bottom, set_prev_checked_arr_bottom, bottomGridRef, marquee, onGridMouseDown, adv_hone_strategy, adv_hone_strategy_change, useGridInput = true, advCounts, onNumericInputChange }: AdvancedHoningPanelProps) {\n    return (\n        <div>\n            <h2 style={{ ...styles.sectionTitle, marginTop: '-8px' }}>Advanced Honing</h2>\n            <div style={styles.gridSection}>\n                <div style={{ display: 'flex', gap: 8 }}>\n                    <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', textWrap: 'nowrap', gap: 0 }}>\n                        {['', 'Helmet', 'Shoulder', 'Chest', 'Pants', 'Glove', 'Weapon'].map((lab) => (\n                            <div key={\"Adv Honing label\" + lab} style={{ height: 28, color: 'var(--text-secondary)', display: 'flex', alignItems: 'center', justifyContent: 'flex-end', paddingRight: 8 }}>\n                                {lab ? <Icon iconName={lab} display_text=\"\" size={28} style={{ fontSize: 'var(--font-size-sm)' }} /> : ''}\n                            </div>\n                        ))}\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                        <div style={{ display: 'grid', gridTemplateColumns: `repeat(${BOTTOM_COLS}, ${CELL_W}px)`, gap: 0, paddingLeft: 1 }}>\n                            {[10, 20, 30, 40].map((n, i) => {\n                                const label = `+${n}`\n                                return (\n                                    <div key={label + \" adv\"} className=\"checkbox-item\">\n                                        <input\n                                            id={label + ' adv'}\n                                            type=\"checkbox\"\n                                            className=\"visually-hidden\"\n                                            checked={prev_checked_arr_bottom[i]}\n                                            onChange={() => setBottomGrid((prev: any) => {\n                                                const copy = prev.map((row: any) => row.slice())\n                                                const newState = !prev_checked_arr_bottom[i]\n                                                for (let rr = 0; rr < BOTTOM_ROWS; rr++) {\n                                                    copy[rr][i] = newState\n                                                }\n                                                set_prev_checked_arr_bottom(prev => {\n                                                    const newArr = [...prev]\n                                                    newArr[i] = newState\n                                                    return newArr\n                                                })\n                                                return copy\n                                            })}\n                                        />\n                                        <label htmlFor={label + ' adv'} className=\"box\">\n                                            <span className=\"box-text\">{label}</span>\n                                        </label>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <CheckboxGrid\n                            grid={bottomGrid}\n                            rows={BOTTOM_ROWS}\n                            cols={BOTTOM_COLS}\n                            gridRef={bottomGridRef}\n                            onGridMouseDown={onGridMouseDown}\n                            marquee={marquee}\n                            CELL_W={CELL_W}\n                            CELL_H={CELL_H}\n                            gridName=\"bottom\"\n                            useGridInput={useGridInput}\n                            numericInputs={advCounts}\n                            onNumericInputChange={onNumericInputChange}\n                        />\n                    </div>\n                </div>\n\n                <div style={{ marginTop: 16, display: 'flex', justifyContent: 'flex-end' }}>\n                    <select value={adv_hone_strategy} onChange={(e) => adv_hone_strategy_change(e.target.value)} style={{ padding: '8px 12px', borderRadius: 'var(--border-radius-small)', background: 'var(--bg-tertiary)', color: 'var(--text-primary)', border: '1px solid var(--border-secondary)', fontSize: 'var(--font-size-sm)' }}>\n                        <option value=\"No juice\">No juice</option>\n                        <option value=\"Juice on grace\">Juice on grace</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n","import React from \"react\"\nimport { INPUT_LABELS, TOP_ROWS, TOP_COLS, BOTTOM_ROWS, BOTTOM_COLS } from \"./constants.ts\"\n\nexport function createClearAll({\n    setTopGrid,\n    setBottomGrid,\n    set_prev_checked_arr,\n    set_prev_checked_arr_bottom,\n    set_budget_inputs,\n    setUserMatsValue,\n    set_desired_chance,\n    set_adv_hone_strategy_change,\n    set_express_event,\n    setAutoOptimization,\n    _setBucketCount,\n    setCumulativeGraph,\n    setDataSize,\n    setLockXAxis,\n    setLockedMins,\n    setLockedMaxs,\n    setShowAverage,\n    setUseGridInput,\n    setNormalCounts,\n    setAdvCounts,\n}: {\n    setTopGrid: React.Dispatch<React.SetStateAction<any>>\n    setBottomGrid: React.Dispatch<React.SetStateAction<any>>\n    set_prev_checked_arr: React.Dispatch<React.SetStateAction<boolean[]>>\n    set_prev_checked_arr_bottom: React.Dispatch<React.SetStateAction<boolean[]>>\n    set_budget_inputs: React.Dispatch<React.SetStateAction<any>>\n    setUserMatsValue: React.Dispatch<React.SetStateAction<any>>\n    set_desired_chance: React.Dispatch<React.SetStateAction<string>>\n    set_adv_hone_strategy_change: React.Dispatch<React.SetStateAction<string>>\n    set_express_event: React.Dispatch<React.SetStateAction<boolean>>\n    setAutoOptimization: React.Dispatch<React.SetStateAction<boolean>>\n    _setBucketCount: React.Dispatch<React.SetStateAction<string>>\n    setCumulativeGraph: React.Dispatch<React.SetStateAction<boolean>>\n    setDataSize: React.Dispatch<React.SetStateAction<string>>\n    setLockXAxis: React.Dispatch<React.SetStateAction<boolean>>\n    setLockedMins: React.Dispatch<React.SetStateAction<number[] | null>>\n    setLockedMaxs: React.Dispatch<React.SetStateAction<number[] | null>>\n    setShowAverage: React.Dispatch<React.SetStateAction<boolean>>\n    setUseGridInput: React.Dispatch<React.SetStateAction<boolean>>\n    setNormalCounts: React.Dispatch<React.SetStateAction<number[][]>>\n    setAdvCounts: React.Dispatch<React.SetStateAction<number[][]>>\n}) {\n    return () => {\n        // Grids and their column header checkboxes\n        setTopGrid(Array.from({ length: TOP_ROWS }, () => Array(TOP_COLS).fill(false)))\n        setBottomGrid(Array.from({ length: BOTTOM_ROWS }, () => Array(BOTTOM_COLS).fill(false)))\n        set_prev_checked_arr(Array.from({ length: TOP_COLS }, () => false))\n        set_prev_checked_arr_bottom(Array.from({ length: BOTTOM_COLS }, () => false))\n\n        // Inputs and toggles to defaults\n        set_budget_inputs(Object.fromEntries(INPUT_LABELS.map((l) => [l, \"0\"])))\n        setUserMatsValue(Object.fromEntries(INPUT_LABELS.slice(0, 7).map((l) => (l == \"Gold\" ? [l, \"1\"] : [l, \"0\"]))))\n        set_desired_chance(\"50\")\n        set_adv_hone_strategy_change(\"No juice\")\n        set_express_event(true)\n        setAutoOptimization(true)\n        _setBucketCount(\"100\")\n        setCumulativeGraph(false)\n        setDataSize(\"100000\")\n\n        // Reset lock x-axis state\n        setLockXAxis(false)\n        setLockedMins(null)\n        setLockedMaxs(null)\n\n        // Reset show average checkbox\n        setShowAverage(false)\n\n        // Reset grid input checkbox to ticked (default)\n        setUseGridInput(true)\n\n        // Reset numeric input states\n        setNormalCounts(Array.from({ length: 2 }, () => Array(TOP_COLS).fill(0)))\n        setAdvCounts(Array.from({ length: 2 }, () => Array(BOTTOM_COLS).fill(0)))\n    }\n}\n\nexport function createFillRandom({\n    setTopGrid,\n    setBottomGrid,\n    set_desired_chance,\n    set_prev_checked_arr,\n    set_prev_checked_arr_bottom,\n}: {\n    setTopGrid: React.Dispatch<React.SetStateAction<any>>\n    setBottomGrid: React.Dispatch<React.SetStateAction<any>>\n    set_desired_chance: React.Dispatch<React.SetStateAction<string>>\n    set_prev_checked_arr: React.Dispatch<React.SetStateAction<boolean[]>>\n    set_prev_checked_arr_bottom: React.Dispatch<React.SetStateAction<boolean[]>>\n}) {\n    return () => {\n        // Generate random grids\n        const newTopGrid = Array.from({ length: TOP_ROWS }, () => Array.from({ length: TOP_COLS }, () => Math.random() > 0.7))\n        const newBottomGrid = Array.from({ length: BOTTOM_ROWS }, () => Array.from({ length: BOTTOM_COLS }, () => Math.random() > 0.7))\n\n        // Check for full columns in top grid and update prev_checked_arr accordingly\n        const newPrevCheckedArr = Array.from({ length: TOP_COLS }, (_, colIndex) => {\n            return newTopGrid.every((row) => row[colIndex] === true)\n        })\n\n        // Check for full columns in bottom grid and update prev_checked_arr_bottom accordingly\n        const newPrevCheckedArrBottom = Array.from({ length: BOTTOM_COLS }, (_, colIndex) => {\n            return newBottomGrid.every((row) => row[colIndex] === true)\n        })\n\n        setTopGrid(newTopGrid)\n        setBottomGrid(newBottomGrid)\n        set_prev_checked_arr(newPrevCheckedArr)\n        set_prev_checked_arr_bottom(newPrevCheckedArrBottom)\n        set_desired_chance((Math.random() * 100).toFixed(0).toString())\n    }\n}\n\nexport function createFillDemo({\n    setTopGrid,\n    setBottomGrid,\n    set_budget_inputs,\n    set_desired_chance,\n    set_prev_checked_arr,\n}: {\n    setTopGrid: React.Dispatch<React.SetStateAction<any>>\n    setBottomGrid: React.Dispatch<React.SetStateAction<any>>\n    set_budget_inputs: React.Dispatch<React.SetStateAction<any>>\n    set_desired_chance: React.Dispatch<React.SetStateAction<string>>\n    set_prev_checked_arr: React.Dispatch<React.SetStateAction<boolean[]>>\n}) {\n    return () => {\n        setTopGrid(Array.from({ length: TOP_ROWS }, () => Array.from({ length: TOP_COLS }, (_, ind) => ind == 19 || ind == 20 || ind == 21)))\n        setBottomGrid(Array.from({ length: BOTTOM_ROWS }, (_, piece) => Array.from({ length: BOTTOM_COLS }, (_, ind) => ind == 3 && piece < 3)))\n        set_budget_inputs({\n            Red: \"431777\",\n            Blue: \"1064398\",\n            Leaps: \"23748\",\n            Shards: \"9010948\",\n            Oreha: \"15125\",\n            Gold: \"1803792\",\n            Silver: \"999999999\",\n            \"Red juice\": \"420\",\n            \"Blue juice\": \"690\",\n            \"Special leaps\": \"6767\",\n        })\n        set_desired_chance(\"69\")\n        set_prev_checked_arr(Array.from({ length: TOP_COLS }, (_, ind) => ind == 19 || ind == 20 || ind == 21))\n    }\n}\n"],"names":["ControlPanel","_controlsLeft","_mainScale","fillDemo","fillRandom","clearAll","express_event","set_express_event","cumulativeGraph","setCumulativeGraph","dataSize","setDataSize","lockXAxis","onToggleLockXAxis","useGridInput","setUseGridInput","jsx","styles","jsxs","e","v","NormalHoningPanel","topGrid","setTopGrid","prev_checked_arr","set_prev_checked_arr","topGridRef","marquee","onGridMouseDown","normalCounts","onNumericInputChange","lab","Icon","TOP_COLS","CELL_W","_col","col_num","label","prev","copy","row","newState","rr","TOP_ROWS","newArr","CheckboxGrid","CELL_H","AdvancedHoningPanel","bottomGrid","setBottomGrid","prev_checked_arr_bottom","set_prev_checked_arr_bottom","bottomGridRef","adv_hone_strategy","adv_hone_strategy_change","advCounts","BOTTOM_COLS","n","i","BOTTOM_ROWS","createClearAll","set_budget_inputs","setUserMatsValue","set_desired_chance","set_adv_hone_strategy_change","setAutoOptimization","_setBucketCount","setLockXAxis","setLockedMins","setLockedMaxs","setShowAverage","setNormalCounts","setAdvCounts","INPUT_LABELS","l","createFillRandom","newTopGrid","newBottomGrid","newPrevCheckedArr","_","colIndex","newPrevCheckedArrBottom","createFillDemo","ind","piece"],"mappings":"mMAqBA,SAAwBA,EAAa,CAAE,aAAcC,EAAe,UAAWC,EAAY,SAAAC,EAAU,WAAAC,EAAY,SAAAC,EAAU,cAAAC,EAAe,kBAAAC,EAAmB,gBAAAC,EAAiB,mBAAAC,EAAoB,SAAAC,EAAU,YAAAC,EAAa,UAAAC,EAAW,kBAAAC,EAAmB,aAAAC,EAAc,gBAAAC,GAAsC,CACvS,cACK,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,cAAe,SAAU,WAAY,aAAc,IAAK,EAAG,SAAU,IAAK,WAAY,GACjH,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAG,MAAO,CAAE,GAAGC,EAAO,aAAc,UAAW,OAAQ,UAAW,QAAA,EAAY,SAAA,UAAA,CAAQ,EACvFD,EAAAA,IAAC,MAAA,CAAI,MAAO,CAAE,GAAGC,EAAO,cAAe,UAAW,OAAQ,MAAO,OAAA,EAC7D,gBAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,oBAAqB,MAAO,MAAA,EACrF,SAAA,CAAAD,MAAC,UAAO,MAAOC,EAAO,WAAY,QAASd,EAAU,SAAA,YAAS,QAC7D,SAAA,CAAO,MAAOc,EAAO,WAAY,QAASb,EAAY,SAAA,cAAW,QACjE,SAAA,CAAO,MAAOa,EAAO,WAAY,QAASZ,EAAU,SAAA,YAAS,EAE9Da,EAAAA,KAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,MAAO,UAAW,KAAA,EACxE,SAAA,CAAAF,EAAAA,IAAC,QAAA,CAAM,QAAQ,gBAAgB,MAAO,CAAE,MAAO,sBAAuB,SAAU,sBAAuB,OAAQ,SAAA,EAAa,SAAA,gBAAa,EACzIA,EAAAA,IAAC,QAAA,CACG,KAAK,WACL,GAAG,gBACH,QAASV,EACT,SAAWa,GAAMZ,EAAkBY,EAAE,OAAO,OAAO,EACnD,MAAO,CACH,MAAO,OACP,OAAQ,OACR,OAAQ,UACR,YAAa,2BAAA,CACjB,CAAA,CACJ,EACJ,EAEAD,EAAAA,KAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,KAAA,EACtD,SAAA,CAAAF,EAAAA,IAAC,QAAA,CAAM,QAAQ,mBAAmB,MAAO,CAAE,MAAO,sBAAuB,SAAU,sBAAuB,OAAQ,SAAA,EAAa,SAAA,mBAAgB,EAC/IA,EAAAA,IAAC,QAAA,CACG,KAAK,WACL,GAAG,mBACH,QAASR,EACT,SAAWW,GAAMV,EAAmBU,EAAE,OAAO,OAAO,EACpD,MAAO,CACH,MAAO,OACP,OAAQ,OACR,OAAQ,UACR,YAAa,2BAAA,CACjB,CAAA,CACJ,EACJ,EAEAD,EAAAA,KAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,KAAA,EACtD,SAAA,CAAAF,EAAAA,IAAC,QAAA,CAAM,QAAQ,aAAa,MAAO,CAAE,MAAO,sBAAuB,SAAU,sBAAuB,OAAQ,SAAA,EAAa,SAAA,aAAU,EACnIA,EAAAA,IAAC,QAAA,CACG,KAAK,WACL,GAAG,aACH,QAASF,EACT,SAAWK,GAAMJ,EAAgBI,EAAE,OAAO,OAAO,EACjD,MAAO,CACH,MAAO,OACP,OAAQ,OACR,OAAQ,UACR,YAAa,2BAAA,CACjB,CAAA,CACJ,EACJ,EACAD,EAAAA,KAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,KAAA,EACtD,SAAA,CAAAF,EAAAA,IAAC,QAAA,CAAM,QAAQ,YAAY,MAAO,CAAE,MAAO,sBAAuB,SAAU,sBAAuB,OAAQ,UAAW,SAAU,UAAY,SAAA,cAAW,EACvJA,EAAAA,IAAC,QAAA,CAAM,KAAK,OAAO,GAAG,YAAY,MAAON,EAAU,SAAWS,GAAM,CAChE,IAAIC,EAAID,EAAE,OAAO,MAAM,QAAQ,UAAW,EAAE,EAC5CC,EAAIA,EAAE,QAAQ,YAAa,EAAE,EAC7BT,EAAYS,CAAC,CACjB,EAAG,OAAQ,IAAM,CACb,MAAM,EAAI,KAAK,IAAI,IAAS,KAAK,IAAI,IAAM,KAAK,MAAM,OAAOV,CAAQ,GAAK,CAAC,CAAC,CAAC,EAC7EC,EAAY,OAAO,CAAC,CAAC,CACzB,EAAG,MAAO,CAAE,MAAO,GAAI,SAAU,GAAI,QAAS,UAAW,aAAc,EAAG,WAAY,kBAAmB,MAAO,oBAAqB,OAAQ,+BAAA,EAAmC,YAAY,QAAA,CAAS,CAAA,EACzM,EAEAK,EAAAA,IAAC,SAAA,CACG,MAAO,CACH,GAAGC,EAAO,WACV,WAAYL,EAAY,kCAAoC,kBAC5D,MAAOA,EAAY,UAAY,uBAC/B,MAAO,MAAA,EAEX,QAASC,EACT,MAAM,uDAEL,WAAY,gBAAkB,aAAA,CAAA,CACnC,CAAA,CACJ,CAAA,CACJ,CAAA,EACJ,CAER,CCvFA,SAAwBQ,EAAkB,CAAE,QAAAC,EAAS,WAAAC,EAAY,iBAAAC,EAAkB,qBAAAC,EAAsB,WAAAC,EAAY,QAAAC,EAAS,gBAAAC,EAAiB,aAAAd,EAAe,GAAM,aAAAe,EAAc,qBAAAC,GAAgD,CAC9N,cACK,MAAA,CACG,SAAA,CAAAd,EAAAA,IAAC,KAAA,CAAG,MAAO,CAAE,GAAGC,EAAO,aAAc,UAAW,MAAA,EAAU,SAAA,eAAA,CAAa,QACtE,MAAA,CAAI,MAAO,CAAE,GAAGA,EAAO,YAAa,SAAU,SAC3C,SAAAC,EAAAA,KAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,GAChC,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,MAAO,CAAE,MAAO,IAAK,QAAS,OAAQ,cAAe,SAAU,eAAgB,aAAc,SAAU,SAAU,IAAK,CAAA,EACtH,SAAA,CAAC,GAAI,SAAU,WAAY,QAAS,QAAS,QAAS,QAAQ,EAAE,IAAKe,SACjE,MAAA,CAAsC,MAAO,CAAE,OAAQ,GAAI,MAAO,wBAAyB,QAAS,OAAQ,WAAY,SAAU,eAAgB,WAAY,aAAc,CAAA,EACxK,SAAAA,EAAMf,EAAAA,IAACgB,EAAA,CAAK,SAAUD,EAAK,KAAM,GAAI,MAAO,CAAE,SAAU,qBAAA,CAAsB,CAAG,EAAK,EAAA,EADjF,sBAAwBA,CAElC,CACH,EACL,EACAb,EAAAA,KAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,CAAA,EACzD,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,oBAAqB,UAAUiB,CAAQ,KAAKC,CAAM,MAAO,IAAK,EAAG,YAAa,GACxG,SAAAZ,EAAQ,CAAC,EAAE,IAAI,CAACa,EAAMC,IAAY,CAC/B,MAAMC,EAAQ,IAAID,EAAU,CAAC,GAC7B,OACIlB,EAAAA,KAAC,MAAA,CAAgB,UAAU,gBACvB,SAAA,CAAAF,EAAAA,IAAC,QAAA,CACG,GAAIqB,EACJ,KAAK,WACL,UAAU,kBACV,QAASb,EAAiBY,CAAO,EACjC,SAAU,IAAMb,EAAYe,GAAc,CACtC,MAAMC,EAAOD,EAAK,IAAKE,GAAaA,EAAI,OAAO,EACzCC,EAAW,CAACjB,EAAiBY,CAAO,EAC1C,QAASM,EAAK,EAAGA,EAAKC,EAAUD,IAC5BH,EAAKG,CAAE,EAAEN,CAAO,EAAIK,EAExB,OAAAhB,EAAqBa,GAAQ,CACzB,MAAMM,EAAS,CAAC,GAAGN,CAAI,EACvB,OAAAM,EAAOR,CAAO,EAAIK,EACXG,CACX,CAAC,EACML,CACX,CAAC,CAAA,CAAA,EAELvB,EAAAA,IAAC,QAAA,CAAM,QAASqB,EAAO,UAAU,MAC7B,SAAArB,EAAAA,IAAC,OAAA,CAAK,UAAU,WAAY,SAAAqB,CAAA,CAAM,CAAA,CACtC,CAAA,CAAA,EAtBMA,CAuBV,CAER,CAAC,CAAA,CACL,EACArB,EAAAA,IAAC6B,EAAA,CACG,KAAMvB,EACN,KAAMqB,EACN,KAAMV,EACN,QAASP,EACT,gBAAAE,EACA,QAAAD,EACA,OAAAO,EACA,OAAAY,EACA,SAAS,MACT,aAAAhC,EACA,cAAee,EACf,qBAAAC,CAAA,CAAA,CACJ,CAAA,CACJ,CAAA,CAAA,CACJ,CAAA,CACJ,CAAA,EACJ,CAER,CC9DA,SAAwBiB,EAAoB,CAAE,WAAAC,EAAY,cAAAC,EAAe,wBAAAC,EAAyB,4BAAAC,EAA6B,cAAAC,EAAe,QAAAzB,EAAS,gBAAAC,EAAiB,kBAAAyB,EAAmB,yBAAAC,EAA0B,aAAAxC,EAAe,GAAM,UAAAyC,EAAW,qBAAAzB,GAAkD,CACnS,cACK,MAAA,CACG,SAAA,CAAAd,EAAAA,IAAC,KAAA,CAAG,MAAO,CAAE,GAAGC,EAAO,aAAc,UAAW,MAAA,EAAU,SAAA,iBAAA,CAAe,EACzEC,EAAAA,KAAC,MAAA,CAAI,MAAOD,EAAO,YACf,SAAA,CAAAC,OAAC,OAAI,MAAO,CAAE,QAAS,OAAQ,IAAK,GAChC,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,cAAe,SAAU,eAAgB,aAAc,SAAU,SAAU,IAAK,CAAA,EAC1G,SAAA,CAAC,GAAI,SAAU,WAAY,QAAS,QAAS,QAAS,QAAQ,EAAE,IAAKe,GAClEf,EAAAA,IAAC,MAAA,CAAmC,MAAO,CAAE,OAAQ,GAAI,MAAO,wBAAyB,QAAS,OAAQ,WAAY,SAAU,eAAgB,WAAY,aAAc,CAAA,EACrK,SAAAe,EAAMf,EAAAA,IAACgB,EAAA,CAAK,SAAUD,EAAK,aAAa,GAAG,KAAM,GAAI,MAAO,CAAE,SAAU,qBAAA,CAAsB,CAAG,EAAK,EAAA,EADjG,mBAAqBA,CAE/B,CACH,EACL,EACAb,EAAAA,KAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,cAAe,SAAU,IAAK,CAAA,EACzD,SAAA,CAAAF,EAAAA,IAAC,MAAA,CAAI,MAAO,CAAE,QAAS,OAAQ,oBAAqB,UAAUwC,CAAW,KAAKtB,CAAM,MAAO,IAAK,EAAG,YAAa,GAC3G,SAAA,CAAC,GAAI,GAAI,GAAI,EAAE,EAAE,IAAI,CAACuB,EAAGC,IAAM,CAC5B,MAAMrB,EAAQ,IAAIoB,CAAC,GACnB,OACIvC,EAAAA,KAAC,MAAA,CAAyB,UAAU,gBAChC,SAAA,CAAAF,EAAAA,IAAC,QAAA,CACG,GAAIqB,EAAQ,OACZ,KAAK,WACL,UAAU,kBACV,QAASa,EAAwBQ,CAAC,EAClC,SAAU,IAAMT,EAAeX,GAAc,CACzC,MAAMC,EAAOD,EAAK,IAAKE,GAAaA,EAAI,OAAO,EACzCC,EAAW,CAACS,EAAwBQ,CAAC,EAC3C,QAAShB,EAAK,EAAGA,EAAKiB,EAAajB,IAC/BH,EAAKG,CAAE,EAAEgB,CAAC,EAAIjB,EAElB,OAAAU,EAA4Bb,GAAQ,CAChC,MAAMM,EAAS,CAAC,GAAGN,CAAI,EACvB,OAAAM,EAAOc,CAAC,EAAIjB,EACLG,CACX,CAAC,EACML,CACX,CAAC,CAAA,CAAA,EAELvB,EAAAA,IAAC,QAAA,CAAM,QAASqB,EAAQ,OAAQ,UAAU,MACtC,SAAArB,EAAAA,IAAC,OAAA,CAAK,UAAU,WAAY,SAAAqB,CAAA,CAAM,CAAA,CACtC,CAAA,CAAA,EAtBMA,EAAQ,MAuBlB,CAER,CAAC,CAAA,CACL,EACArB,EAAAA,IAAC6B,EAAA,CACG,KAAMG,EACN,KAAMW,EACN,KAAMH,EACN,QAASJ,EACT,gBAAAxB,EACA,QAAAD,EACA,OAAAO,EACA,OAAAY,EACA,SAAS,SACT,aAAAhC,EACA,cAAeyC,EACf,qBAAAzB,CAAA,CAAA,CACJ,CAAA,CACJ,CAAA,EACJ,QAEC,MAAA,CAAI,MAAO,CAAE,UAAW,GAAI,QAAS,OAAQ,eAAgB,YAC1D,SAAAZ,EAAAA,KAAC,SAAA,CAAO,MAAOmC,EAAmB,SAAWlC,GAAMmC,EAAyBnC,EAAE,OAAO,KAAK,EAAG,MAAO,CAAE,QAAS,WAAY,aAAc,6BAA8B,WAAY,qBAAsB,MAAO,sBAAuB,OAAQ,oCAAqC,SAAU,uBAC1R,SAAA,CAAAH,EAAAA,IAAC,SAAA,CAAO,MAAM,WAAW,SAAA,WAAQ,EACjCA,EAAAA,IAAC,SAAA,CAAO,MAAM,iBAAiB,SAAA,gBAAA,CAAc,CAAA,CAAA,CACjD,CAAA,CACJ,CAAA,CAAA,CACJ,CAAA,EACJ,CAER,CCzFO,SAAS4C,EAAe,CAC3B,WAAArC,EACA,cAAA0B,EACA,qBAAAxB,EACA,4BAAA0B,EACA,kBAAAU,EACA,iBAAAC,EACA,mBAAAC,EACA,6BAAAC,EACA,kBAAAzD,EACA,oBAAA0D,EACA,gBAAAC,EACA,mBAAAzD,EACA,YAAAE,EACA,aAAAwD,EACA,cAAAC,EACA,cAAAC,EACA,eAAAC,EACA,gBAAAvD,EACA,gBAAAwD,EACA,aAAAC,CACJ,EAqBG,CACC,MAAO,IAAM,CAETjD,EAAW,MAAM,KAAK,CAAE,OAAQoB,CAAA,EAAY,IAAM,MAAMV,CAAQ,EAAE,KAAK,EAAK,CAAC,CAAC,EAC9EgB,EAAc,MAAM,KAAK,CAAE,OAAQU,CAAA,EAAe,IAAM,MAAMH,CAAW,EAAE,KAAK,EAAK,CAAC,CAAC,EACvF/B,EAAqB,MAAM,KAAK,CAAE,OAAQQ,GAAY,IAAM,EAAK,CAAC,EAClEkB,EAA4B,MAAM,KAAK,CAAE,OAAQK,GAAe,IAAM,EAAK,CAAC,EAG5EK,EAAkB,OAAO,YAAYY,EAAa,IAAKC,GAAM,CAACA,EAAG,GAAG,CAAC,CAAC,CAAC,EACvEZ,EAAiB,OAAO,YAAYW,EAAa,MAAM,EAAG,CAAC,EAAE,IAAKC,GAAOA,GAAK,OAAS,CAACA,EAAG,GAAG,EAAI,CAACA,EAAG,GAAG,CAAE,CAAC,CAAC,EAC7GX,EAAmB,IAAI,EACvBC,EAA6B,UAAU,EACvCzD,EAAkB,EAAI,EACtB0D,EAAoB,EAAI,EACxBC,EAAgB,KAAK,EACrBzD,EAAmB,EAAK,EACxBE,EAAY,QAAQ,EAGpBwD,EAAa,EAAK,EAClBC,EAAc,IAAI,EAClBC,EAAc,IAAI,EAGlBC,EAAe,EAAK,EAGpBvD,EAAgB,EAAI,EAGpBwD,EAAgB,MAAM,KAAK,CAAE,OAAQ,CAAA,EAAK,IAAM,MAAMtC,CAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,EACxEuC,EAAa,MAAM,KAAK,CAAE,OAAQ,CAAA,EAAK,IAAM,MAAMhB,CAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAC5E,CACJ,CAEO,SAASmB,EAAiB,CAC7B,WAAApD,EACA,cAAA0B,EACA,mBAAAc,EACA,qBAAAtC,EACA,4BAAA0B,CACJ,EAMG,CACC,MAAO,IAAM,CAET,MAAMyB,EAAa,MAAM,KAAK,CAAE,OAAQjC,CAAA,EAAY,IAAM,MAAM,KAAK,CAAE,OAAQV,GAAY,IAAM,KAAK,OAAA,EAAW,EAAG,CAAC,EAC/G4C,EAAgB,MAAM,KAAK,CAAE,OAAQlB,CAAA,EAAe,IAAM,MAAM,KAAK,CAAE,OAAQH,GAAe,IAAM,KAAK,OAAA,EAAW,EAAG,CAAC,EAGxHsB,EAAoB,MAAM,KAAK,CAAE,OAAQ7C,CAAA,EAAY,CAAC8C,EAAGC,IACpDJ,EAAW,MAAOpC,GAAQA,EAAIwC,CAAQ,IAAM,EAAI,CAC1D,EAGKC,EAA0B,MAAM,KAAK,CAAE,OAAQzB,CAAA,EAAe,CAACuB,EAAGC,IAC7DH,EAAc,MAAOrC,GAAQA,EAAIwC,CAAQ,IAAM,EAAI,CAC7D,EAEDzD,EAAWqD,CAAU,EACrB3B,EAAc4B,CAAa,EAC3BpD,EAAqBqD,CAAiB,EACtC3B,EAA4B8B,CAAuB,EACnDlB,GAAoB,KAAK,SAAW,KAAK,QAAQ,CAAC,EAAE,UAAU,CAClE,CACJ,CAEO,SAASmB,EAAe,CAC3B,WAAA3D,EACA,cAAA0B,EACA,kBAAAY,EACA,mBAAAE,EACA,qBAAAtC,CACJ,EAMG,CACC,MAAO,IAAM,CACTF,EAAW,MAAM,KAAK,CAAE,OAAQoB,GAAY,IAAM,MAAM,KAAK,CAAE,OAAQV,GAAY,CAAC8C,EAAGI,IAAQA,GAAO,IAAMA,GAAO,IAAMA,GAAO,EAAE,CAAC,CAAC,EACpIlC,EAAc,MAAM,KAAK,CAAE,OAAQU,GAAe,CAACoB,EAAGK,IAAU,MAAM,KAAK,CAAE,OAAQ5B,GAAe,CAACuB,EAAGI,IAAQA,GAAO,GAAKC,EAAQ,CAAC,CAAC,CAAC,EACvIvB,EAAkB,CACd,IAAK,SACL,KAAM,UACN,MAAO,QACP,OAAQ,UACR,MAAO,QACP,KAAM,UACN,OAAQ,YACR,YAAa,MACb,aAAc,MACd,gBAAiB,MAAA,CACpB,EACDE,EAAmB,IAAI,EACvBtC,EAAqB,MAAM,KAAK,CAAE,OAAQQ,GAAY,CAAC8C,EAAGI,IAAQA,GAAO,IAAMA,GAAO,IAAMA,GAAO,EAAE,CAAC,CAC1G,CACJ"}